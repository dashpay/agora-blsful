// Cross-Compatibility Test Vectors
// Generated by C++ bls-signatures for import into Rust
use blsful::*;

/// Helper function to convert raw signature bytes to Rust signatures
/// Takes raw curve point bytes (96 bytes for G2) and adds Basic scheme prefix
fn signature_from_raw_bytes(raw_sig_bytes: &[u8]) -> Result<Signature<Bls12381G2Impl>, BlsError> {
    // Prepend Basic scheme byte (0x00) to raw signature bytes
    let mut with_scheme = vec![0u8]; // Basic scheme = 0
    with_scheme.extend_from_slice(raw_sig_bytes);

    // Use existing Rust deserialization - much simpler!
    Signature::<Bls12381G2Impl>::try_from(with_scheme.as_slice())
}

// === Test Case 1: Two Signers ===

#[test]
fn test_cpp_rust_two_signers() {
    // Keys and signatures generated by C++ bls-signatures

    // Private keys from C++
    let cpp_sk1_bytes = [
        0x2a, 0x06, 0x16, 0x4d, 0xae, 0x47, 0x51, 0xe5, 0x66, 0xee, 0x28, 0x54, 0xf2, 0x86, 0x5f,
        0x78, 0x2f, 0x28, 0xe2, 0x42, 0x0e, 0xc2, 0xad, 0xe0, 0x59, 0xed, 0x43, 0x49, 0x19, 0xb6,
        0x7b, 0x5d,
    ];
    let cpp_sk2_bytes = [
        0x13, 0xc6, 0xe9, 0x4c, 0xf9, 0xd3, 0xaf, 0x2e, 0x5c, 0x35, 0xd5, 0xae, 0x8f, 0x68, 0x74,
        0xc5, 0xbd, 0x81, 0xe5, 0x2a, 0xe6, 0xfa, 0xee, 0x28, 0x1d, 0x0a, 0x8f, 0x27, 0xc0, 0x6c,
        0xeb, 0xa9,
    ];

    // Public keys from C++
    let cpp_pk1_bytes = [
        0xb1, 0x45, 0xdf, 0xcb, 0x3c, 0xbd, 0xef, 0x21, 0x50, 0x2f, 0x30, 0x5d, 0x1b, 0xa1, 0xcb,
        0xa5, 0x84, 0x79, 0x69, 0x18, 0x57, 0x1e, 0x8b, 0x5d, 0x85, 0xbe, 0x17, 0x6f, 0x34, 0x45,
        0xac, 0x7a, 0xd9, 0x9a, 0xec, 0x19, 0xe1, 0x93, 0x1b, 0x69, 0x34, 0xd7, 0x29, 0x0b, 0x97,
        0xec, 0x2d, 0x75,
    ];
    let cpp_pk2_bytes = [
        0x94, 0xa7, 0xd9, 0x42, 0x02, 0x7d, 0xf0, 0x42, 0xb1, 0x4b, 0x00, 0xd5, 0x65, 0x6c, 0xb6,
        0xa3, 0xd7, 0x75, 0x51, 0xaf, 0x91, 0x7a, 0x18, 0x83, 0x60, 0x5c, 0x96, 0x4c, 0x4f, 0xfa,
        0xaf, 0xb4, 0x4d, 0x72, 0x9d, 0xc5, 0xf5, 0x11, 0xc6, 0x04, 0x5b, 0x29, 0x08, 0x04, 0x40,
        0xab, 0x85, 0xc8,
    ];

    // Individual signatures from C++
    let cpp_sig1_bytes = [
        0x82, 0xc8, 0x08, 0x03, 0xa3, 0x24, 0x6f, 0x5d, 0x10, 0xb5, 0x19, 0x23, 0xd4, 0x96, 0x7b,
        0xef, 0x55, 0x7c, 0xf0, 0x41, 0x6f, 0xa3, 0x06, 0x05, 0x94, 0x9c, 0xaa, 0xc6, 0x27, 0x3b,
        0x59, 0x93, 0xd2, 0x6f, 0xef, 0x27, 0x8e, 0xb4, 0x86, 0x75, 0xc6, 0x2b, 0x42, 0x26, 0x6f,
        0x9b, 0x01, 0x48, 0x0a, 0x8d, 0xc0, 0x7e, 0xf1, 0x68, 0xed, 0xd3, 0xf1, 0xa9, 0xca, 0xd3,
        0x63, 0x30, 0x83, 0xdc, 0xb3, 0xc2, 0xdf, 0x37, 0x27, 0x89, 0xb8, 0x78, 0x71, 0x24, 0x9d,
        0xab, 0x38, 0x0b, 0x07, 0x1d, 0xd4, 0x80, 0xd7, 0x42, 0xd0, 0x27, 0xf3, 0x7c, 0x36, 0xf8,
        0x9e, 0x63, 0xb5, 0xf1, 0xe0, 0x93,
    ];
    let cpp_sig2_bytes = [
        0xb2, 0xca, 0x57, 0x80, 0x16, 0xe8, 0x96, 0x20, 0xb4, 0x94, 0x03, 0xa0, 0x29, 0xad, 0x96,
        0x40, 0x27, 0x2c, 0x18, 0x45, 0x5a, 0x5f, 0xdd, 0xc4, 0x0f, 0x99, 0x9b, 0xd7, 0x5c, 0xb9,
        0xda, 0xc0, 0x71, 0x61, 0x3c, 0xb5, 0xa6, 0x64, 0xe0, 0xa7, 0x19, 0xa2, 0x29, 0xff, 0x65,
        0x51, 0xfd, 0x52, 0x0b, 0x6d, 0x92, 0x96, 0x75, 0x08, 0xd5, 0xf1, 0xf5, 0x8c, 0xd4, 0x14,
        0xcb, 0xde, 0x44, 0xc9, 0xe3, 0x91, 0x18, 0x73, 0xb4, 0xa2, 0xe9, 0x54, 0x44, 0x29, 0xb8,
        0x67, 0x6f, 0xca, 0x69, 0xcb, 0x97, 0xab, 0xc6, 0xf4, 0x99, 0x16, 0xd0, 0x8c, 0xee, 0xda,
        0x42, 0xb0, 0x6b, 0xe3, 0x6f, 0xf4,
    ];

    // Message
    let message = [0x68, 0x65, 0x6c, 0x6c, 0x6f];

    // Import C++ keys into Rust
    let sk1 = SecretKey::<Bls12381G2Impl>::try_from(cpp_sk1_bytes.as_slice()).unwrap();
    let pk1 = PublicKey::<Bls12381G2Impl>::try_from(cpp_pk1_bytes.as_slice()).unwrap();
    let sig1 = signature_from_raw_bytes(&cpp_sig1_bytes).unwrap();
    let sk2 = SecretKey::<Bls12381G2Impl>::try_from(cpp_sk2_bytes.as_slice()).unwrap();
    let pk2 = PublicKey::<Bls12381G2Impl>::try_from(cpp_pk2_bytes.as_slice()).unwrap();
    let sig2 = signature_from_raw_bytes(&cpp_sig2_bytes).unwrap();

    // Verify that imported secret keys generate correct public keys
    assert_eq!(PublicKey::from(&sk1), pk1, "C++ sk1 should generate pk1");
    assert_eq!(PublicKey::from(&sk2), pk2, "C++ sk2 should generate pk2");

    // Verify C++ signatures in Rust
    assert!(sig1.verify(&pk1, &message).is_ok());
    assert!(sig2.verify(&pk2, &message).is_ok());

    // Test secure aggregation with C++ keys in Rust
    let signatures = vec![sig1, sig2];
    let public_keys = vec![pk1, pk2];

    // Create secure aggregation in Rust using C++ keys
    let secure_agg = AggregateSignature::from_signatures_secure(&signatures, &public_keys).unwrap();
    let final_sig = match secure_agg {
        AggregateSignature::Basic(sig) => Signature::Basic(sig),
        _ => panic!("Expected Basic scheme"),
    };

    // Verify secure aggregation
    assert!(final_sig.verify_secure(&public_keys, &message).is_ok());
}

// === Test Case 2: Three Signers ===

#[test]
fn test_cpp_rust_three_signers() {
    // Keys and signatures generated by C++ bls-signatures

    // Private keys from C++
    let cpp_sk1_bytes = [
        0x2a, 0x06, 0x16, 0x4d, 0xae, 0x47, 0x51, 0xe5, 0x66, 0xee, 0x28, 0x54, 0xf2, 0x86, 0x5f,
        0x78, 0x2f, 0x28, 0xe2, 0x42, 0x0e, 0xc2, 0xad, 0xe0, 0x59, 0xed, 0x43, 0x49, 0x19, 0xb6,
        0x7b, 0x5d,
    ];
    let cpp_sk2_bytes = [
        0x13, 0xc6, 0xe9, 0x4c, 0xf9, 0xd3, 0xaf, 0x2e, 0x5c, 0x35, 0xd5, 0xae, 0x8f, 0x68, 0x74,
        0xc5, 0xbd, 0x81, 0xe5, 0x2a, 0xe6, 0xfa, 0xee, 0x28, 0x1d, 0x0a, 0x8f, 0x27, 0xc0, 0x6c,
        0xeb, 0xa9,
    ];
    let cpp_sk3_bytes = [
        0x0c, 0x3f, 0xad, 0x5c, 0xd1, 0x1b, 0xd5, 0xbc, 0x8a, 0xec, 0xb1, 0xa3, 0x6d, 0x26, 0x3f,
        0xd9, 0xa9, 0xaf, 0x86, 0x23, 0xed, 0x3f, 0x44, 0xfb, 0xb2, 0xcc, 0xbd, 0xa1, 0x7f, 0x08,
        0x8c, 0x23,
    ];

    // Public keys from C++
    let cpp_pk1_bytes = [
        0xb1, 0x45, 0xdf, 0xcb, 0x3c, 0xbd, 0xef, 0x21, 0x50, 0x2f, 0x30, 0x5d, 0x1b, 0xa1, 0xcb,
        0xa5, 0x84, 0x79, 0x69, 0x18, 0x57, 0x1e, 0x8b, 0x5d, 0x85, 0xbe, 0x17, 0x6f, 0x34, 0x45,
        0xac, 0x7a, 0xd9, 0x9a, 0xec, 0x19, 0xe1, 0x93, 0x1b, 0x69, 0x34, 0xd7, 0x29, 0x0b, 0x97,
        0xec, 0x2d, 0x75,
    ];
    let cpp_pk2_bytes = [
        0x94, 0xa7, 0xd9, 0x42, 0x02, 0x7d, 0xf0, 0x42, 0xb1, 0x4b, 0x00, 0xd5, 0x65, 0x6c, 0xb6,
        0xa3, 0xd7, 0x75, 0x51, 0xaf, 0x91, 0x7a, 0x18, 0x83, 0x60, 0x5c, 0x96, 0x4c, 0x4f, 0xfa,
        0xaf, 0xb4, 0x4d, 0x72, 0x9d, 0xc5, 0xf5, 0x11, 0xc6, 0x04, 0x5b, 0x29, 0x08, 0x04, 0x40,
        0xab, 0x85, 0xc8,
    ];
    let cpp_pk3_bytes = [
        0x81, 0x98, 0x50, 0xab, 0xe8, 0x4b, 0x78, 0x49, 0x4f, 0xa1, 0x81, 0xc9, 0x82, 0xe7, 0x97,
        0x22, 0xd9, 0x78, 0xfa, 0x93, 0x90, 0xdd, 0x88, 0xc6, 0x7c, 0x95, 0x56, 0xba, 0x92, 0x07,
        0xd4, 0x12, 0xa3, 0xa4, 0xc9, 0xf4, 0x70, 0x5b, 0xf0, 0x99, 0x91, 0x89, 0xb4, 0x9b, 0x25,
        0x5d, 0x98, 0x83,
    ];

    // Individual signatures from C++
    let cpp_sig1_bytes = [
        0x82, 0xc8, 0x08, 0x03, 0xa3, 0x24, 0x6f, 0x5d, 0x10, 0xb5, 0x19, 0x23, 0xd4, 0x96, 0x7b,
        0xef, 0x55, 0x7c, 0xf0, 0x41, 0x6f, 0xa3, 0x06, 0x05, 0x94, 0x9c, 0xaa, 0xc6, 0x27, 0x3b,
        0x59, 0x93, 0xd2, 0x6f, 0xef, 0x27, 0x8e, 0xb4, 0x86, 0x75, 0xc6, 0x2b, 0x42, 0x26, 0x6f,
        0x9b, 0x01, 0x48, 0x0a, 0x8d, 0xc0, 0x7e, 0xf1, 0x68, 0xed, 0xd3, 0xf1, 0xa9, 0xca, 0xd3,
        0x63, 0x30, 0x83, 0xdc, 0xb3, 0xc2, 0xdf, 0x37, 0x27, 0x89, 0xb8, 0x78, 0x71, 0x24, 0x9d,
        0xab, 0x38, 0x0b, 0x07, 0x1d, 0xd4, 0x80, 0xd7, 0x42, 0xd0, 0x27, 0xf3, 0x7c, 0x36, 0xf8,
        0x9e, 0x63, 0xb5, 0xf1, 0xe0, 0x93,
    ];
    let cpp_sig2_bytes = [
        0xb2, 0xca, 0x57, 0x80, 0x16, 0xe8, 0x96, 0x20, 0xb4, 0x94, 0x03, 0xa0, 0x29, 0xad, 0x96,
        0x40, 0x27, 0x2c, 0x18, 0x45, 0x5a, 0x5f, 0xdd, 0xc4, 0x0f, 0x99, 0x9b, 0xd7, 0x5c, 0xb9,
        0xda, 0xc0, 0x71, 0x61, 0x3c, 0xb5, 0xa6, 0x64, 0xe0, 0xa7, 0x19, 0xa2, 0x29, 0xff, 0x65,
        0x51, 0xfd, 0x52, 0x0b, 0x6d, 0x92, 0x96, 0x75, 0x08, 0xd5, 0xf1, 0xf5, 0x8c, 0xd4, 0x14,
        0xcb, 0xde, 0x44, 0xc9, 0xe3, 0x91, 0x18, 0x73, 0xb4, 0xa2, 0xe9, 0x54, 0x44, 0x29, 0xb8,
        0x67, 0x6f, 0xca, 0x69, 0xcb, 0x97, 0xab, 0xc6, 0xf4, 0x99, 0x16, 0xd0, 0x8c, 0xee, 0xda,
        0x42, 0xb0, 0x6b, 0xe3, 0x6f, 0xf4,
    ];
    let cpp_sig3_bytes = [
        0xa5, 0x05, 0x73, 0xad, 0x15, 0xdd, 0x23, 0x3d, 0xf0, 0x85, 0x69, 0x33, 0x72, 0x48, 0xba,
        0xd3, 0x2c, 0xc2, 0x08, 0xd5, 0xda, 0x64, 0x5a, 0xf8, 0x16, 0x69, 0x43, 0x8d, 0x1a, 0x16,
        0x54, 0xd5, 0xba, 0xe7, 0x6f, 0xc8, 0x20, 0x3b, 0x10, 0x8b, 0x91, 0x20, 0x73, 0xbd, 0x89,
        0x8b, 0x56, 0xba, 0x0c, 0xee, 0x39, 0x71, 0xcd, 0x68, 0xbe, 0xc0, 0x01, 0x4a, 0x0d, 0x1a,
        0x81, 0x4d, 0xbc, 0xe2, 0xc1, 0x52, 0x8e, 0x1d, 0x97, 0xd7, 0x5e, 0xd2, 0x69, 0xdf, 0x05,
        0x5a, 0xc0, 0x02, 0xf9, 0x6e, 0x53, 0xfe, 0x3a, 0x58, 0xb1, 0x99, 0x90, 0x9b, 0xac, 0x0c,
        0x62, 0xa7, 0x99, 0x92, 0xa5, 0x53,
    ];

    // Message
    let message = [0x68, 0x65, 0x6c, 0x6c, 0x6f];

    // Import C++ keys into Rust
    let sk1 = SecretKey::<Bls12381G2Impl>::try_from(cpp_sk1_bytes.as_slice()).unwrap();
    let pk1 = PublicKey::<Bls12381G2Impl>::try_from(cpp_pk1_bytes.as_slice()).unwrap();
    let sig1 = signature_from_raw_bytes(&cpp_sig1_bytes).unwrap();
    let sk2 = SecretKey::<Bls12381G2Impl>::try_from(cpp_sk2_bytes.as_slice()).unwrap();
    let pk2 = PublicKey::<Bls12381G2Impl>::try_from(cpp_pk2_bytes.as_slice()).unwrap();
    let sig2 = signature_from_raw_bytes(&cpp_sig2_bytes).unwrap();
    let sk3 = SecretKey::<Bls12381G2Impl>::try_from(cpp_sk3_bytes.as_slice()).unwrap();
    let pk3 = PublicKey::<Bls12381G2Impl>::try_from(cpp_pk3_bytes.as_slice()).unwrap();
    let sig3 = signature_from_raw_bytes(&cpp_sig3_bytes).unwrap();

    // Verify that imported secret keys generate correct public keys
    assert_eq!(PublicKey::from(&sk1), pk1, "C++ sk1 should generate pk1");
    assert_eq!(PublicKey::from(&sk2), pk2, "C++ sk2 should generate pk2");
    assert_eq!(PublicKey::from(&sk3), pk3, "C++ sk3 should generate pk3");

    // Verify C++ signatures in Rust
    assert!(sig1.verify(&pk1, &message).is_ok());
    assert!(sig2.verify(&pk2, &message).is_ok());
    assert!(sig3.verify(&pk3, &message).is_ok());

    // Test secure aggregation with C++ keys in Rust
    let signatures = vec![sig1, sig2, sig3];
    let public_keys = vec![pk1, pk2, pk3];

    // Create secure aggregation in Rust using C++ keys
    let secure_agg = AggregateSignature::from_signatures_secure(&signatures, &public_keys).unwrap();
    let final_sig = match secure_agg {
        AggregateSignature::Basic(sig) => Signature::Basic(sig),
        _ => panic!("Expected Basic scheme"),
    };

    // Verify secure aggregation
    assert!(final_sig.verify_secure(&public_keys, &message).is_ok());
}

// === Test Normal Aggregation (should fail verify_secure) ===

#[test]
fn test_normal_aggregation_fails_secure_verify() {
    let normal_agg_bytes = [
        0x8e, 0x40, 0x44, 0x44, 0x23, 0x14, 0xab, 0xb8, 0xbb, 0xdb, 0xd5, 0x06, 0xc6, 0xf7, 0xbe,
        0xd1, 0xb7, 0xd0, 0x00, 0x40, 0x77, 0x52, 0x38, 0x4e, 0xca, 0x9e, 0xbf, 0xda, 0x34, 0xd0,
        0x61, 0x21, 0x8e, 0x07, 0xf2, 0x5a, 0x0c, 0xbe, 0x42, 0xdc, 0xaf, 0x68, 0xac, 0x9e, 0xa9,
        0xe5, 0xa0, 0x80, 0x0a, 0x56, 0x44, 0xa1, 0xf0, 0x20, 0xea, 0xd6, 0xe6, 0x27, 0xb3, 0xe0,
        0x34, 0x93, 0x00, 0x02, 0x1c, 0xce, 0x82, 0xc4, 0xc9, 0xa3, 0x3a, 0x0a, 0x88, 0x20, 0x85,
        0xc7, 0xc1, 0xeb, 0x93, 0x46, 0xa9, 0x3f, 0x0f, 0xd8, 0x0a, 0xd4, 0xee, 0x6e, 0x7a, 0x6c,
        0x2a, 0xd7, 0x7e, 0xd2, 0xc0, 0x2a,
    ];

    // This normal aggregation should fail verify_secure
    let normal_sig = signature_from_raw_bytes(&normal_agg_bytes).unwrap();

    // Import the public keys from test case 1
    let cpp_pk1_bytes = [
        0xb1, 0x45, 0xdf, 0xcb, 0x3c, 0xbd, 0xef, 0x21, 0x50, 0x2f, 0x30, 0x5d, 0x1b, 0xa1, 0xcb,
        0xa5, 0x84, 0x79, 0x69, 0x18, 0x57, 0x1e, 0x8b, 0x5d, 0x85, 0xbe, 0x17, 0x6f, 0x34, 0x45,
        0xac, 0x7a, 0xd9, 0x9a, 0xec, 0x19, 0xe1, 0x93, 0x1b, 0x69, 0x34, 0xd7, 0x29, 0x0b, 0x97,
        0xec, 0x2d, 0x75,
    ];
    let cpp_pk2_bytes = [
        0x94, 0xa7, 0xd9, 0x42, 0x02, 0x7d, 0xf0, 0x42, 0xb1, 0x4b, 0x00, 0xd5, 0x65, 0x6c, 0xb6,
        0xa3, 0xd7, 0x75, 0x51, 0xaf, 0x91, 0x7a, 0x18, 0x83, 0x60, 0x5c, 0x96, 0x4c, 0x4f, 0xfa,
        0xaf, 0xb4, 0x4d, 0x72, 0x9d, 0xc5, 0xf5, 0x11, 0xc6, 0x04, 0x5b, 0x29, 0x08, 0x04, 0x40,
        0xab, 0x85, 0xc8,
    ];
    let pk1 = PublicKey::<Bls12381G2Impl>::try_from(cpp_pk1_bytes.as_slice()).unwrap();
    let pk2 = PublicKey::<Bls12381G2Impl>::try_from(cpp_pk2_bytes.as_slice()).unwrap();

    let message = [0x68, 0x65, 0x6c, 0x6c, 0x6f];

    // Normal aggregation should fail verify_secure
    assert!(normal_sig.verify_secure(&[pk1, pk2], &message).is_err());
}

#[test]
fn test_rust_to_cpp_compatibility() {
    // Test that we can export Rust signatures in a format C++ can import
    println!("\n=== Rust → C++ Compatibility Test ===");

    // Create deterministic keys matching C++ test vectors
    let sk1 = SecretKey::<Bls12381G2Impl>::from_hash(&[42u8; 32]);
    let sk2 = SecretKey::<Bls12381G2Impl>::from_hash(&[100u8; 32]);

    let pk1 = PublicKey::from(&sk1);
    let pk2 = PublicKey::from(&sk2);

    let message = b"hello";

    // Create signatures
    let sig1 = sk1.sign(SignatureSchemes::Basic, message).unwrap();
    let sig2 = sk2.sign(SignatureSchemes::Basic, message).unwrap();

    // Export raw G2 signature bytes (96 bytes each, without scheme prefix)
    let sig1_raw = sig1.as_raw_value();
    let sig2_raw = sig2.as_raw_value();

    println!("Rust raw G2 signature 1: {:?}", sig1_raw);
    println!("Rust raw G2 signature 2: {:?}", sig2_raw);

    // Verify signatures work in Rust
    assert!(sig1.verify(&pk1, message).is_ok());
    assert!(sig2.verify(&pk2, message).is_ok());

    // Test secure aggregation
    let secure_agg =
        AggregateSignature::from_signatures_secure(&[sig1, sig2], &[pk1, pk2]).unwrap();
    let secure_sig = match secure_agg {
        AggregateSignature::Basic(sig) => Signature::Basic(sig),
        _ => panic!("Expected Basic scheme"),
    };

    assert!(secure_sig.verify_secure(&[pk1, pk2], message).is_ok());
    println!("✅ Rust secure aggregation works correctly");

    // Show that these raw signatures can be used by C++
    println!("These raw G2 signatures can be imported into C++ BasicSchemeMPL for verification");
}
